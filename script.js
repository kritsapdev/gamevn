const gameData = [
    {
        npcMessage: "üåç Good morning! May I see your passport, please?",
        options: [
            { text: "Here you go!", score: 10, feedback: "‚úÖ Perfect! You sound polite and confident!" },
            { text: "Here you are!", score: 10, feedback: "‚úÖ Great! Native speakers say this too!" },
            { text: "Yes, I have.", score: 0, feedback: "üí° Almost! But we usually say ‚ÄòHere you go!‚Äô when giving something." },
            { text: "Thank you!", score: 0, feedback: "üí° That‚Äôs polite, but the officer asked for your passport. Try ‚ÄòHere you go!‚Äô next time." }
        ]
    },
    {
        npcMessage: "‚úàÔ∏è Hi! Is this your first time abroad?",
        options: [
            { text: "Yes! I‚Äôm so excited!", score: 10, feedback: "‚úÖ Awesome! Your energy is contagious!" },
            { text: "Yes, it is!", score: 10, feedback: "‚úÖ Clear and natural! Well done!" },
            { text: "No, I go many time.", score: 0, feedback: "üí° Nice try! Correct: ‚ÄòNo, I‚Äôve been abroad many times.‚Äô" },
            { text: "I don‚Äôt know.", score: 0, feedback: "üí° Hmm, you know if it‚Äôs your first time! Try ‚ÄòYes!‚Äô or ‚ÄòNo!‚Äô with a smile." }
        ]
    },
    {
        npcMessage: "‚òï Hi there! Are you ready to order?",
        options: [
            { text: "I‚Äôll have a latte, please.", score: 10, feedback: "‚úÖ Perfect! Polite and natural." },
            { text: "I‚Äôd like a coffee, please.", score: 10, feedback: "‚úÖ Excellent! This is how natives order." },
            { text: "Give me coffee.", score: 0, feedback: "üí° Ouch! Sounds rude. Always add ‚Äòplease‚Äô and use ‚ÄòI‚Äôd like‚Ä¶‚Äô" },
            { text: "I want drink.", score: 0, feedback: "üí° Close! Say: ‚ÄòI‚Äôd like a drink, please.‚Äô" }
        ]
    },
    {
        npcMessage: "üó∫Ô∏è You're lost! How do you ask for directions?",
        options: [
            { text: "Excuse me, how can I get to the subway station?", score: 10, feedback: "‚úÖ Perfect! ‚ÄòExcuse me‚Äô is the magic phrase!" },
            { text: "Could you tell me where the station is?", score: 10, feedback: "‚úÖ Very polite! British people love this phrase." },
            { text: "Where subway?", score: 0, feedback: "üí° Too short! Say: ‚ÄòWhere is the subway station?‚Äô" },
            { text: "Station please.", score: 0, feedback: "üí° Not clear. Always start with ‚ÄòExcuse me‚Äô and use full sentences." }
        ]
    }
];

const messageList = document.getElementById('message-list');
const optionsContainer = document.getElementById('options-container');

let currentSceneIndex = 0;
let score = 0;
let isWaitingForUser = false;

function displayMessage(text, type) {
    const messageElement = document.createElement('div');
    messageElement.className = `message ${type}-message`;
    messageElement.innerHTML = text; // Use innerHTML to render emojis and bold tags
    messageList.appendChild(messageElement);
    // Auto-scroll to the latest message
    messageList.scrollTop = messageList.scrollHeight;
}

function displayOptions(options) {
    optionsContainer.innerHTML = '';
    options.forEach(option => {
        const button = document.createElement('button');
        button.className = 'option-button';
        button.textContent = option.text;
        button.onclick = () => selectOption(option);
        optionsContainer.appendChild(button);
    });
    isWaitingForUser = true;
}

function selectOption(option) {
    if (!isWaitingForUser) return;
    isWaitingForUser = false;

    optionsContainer.innerHTML = '';
    
    displayMessage(option.text, 'user');
    score += option.score;

    setTimeout(() => {
        displayMessage(option.feedback, 'feedback');
        
        setTimeout(() => {
            currentSceneIndex++;
            if (currentSceneIndex < gameData.length) {
                startScene(currentSceneIndex);
            } else {
                showSummary();
            }
        }, 1500);
    }, 800);
}

function showSummary() {
    const summaryText = `üåü **‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!** <br><br> ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: **${score}/40** <br><br> ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß!`;
    displayMessage(summaryText.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'), 'summary');

    const restartButton = document.createElement('button');
    restartButton.className = 'option-button';
    restartButton.textContent = '‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
    restartButton.onclick = restartGame;
    optionsContainer.appendChild(restartButton);
}

function restartGame() {
    messageList.innerHTML = '';
    optionsContainer.innerHTML = '';
    currentSceneIndex = 0;
    score = 0;
    startScene(currentSceneIndex);
}

function startScene(index) {
    const scene = gameData[index];
    setTimeout(() => {
        displayMessage(scene.npcMessage, 'npc');
        setTimeout(() => {
            displayOptions(scene.options);
        }, 1000);
    }, 500);
}

// Start the game when the script loads
startScene(currentSceneIndex);
